(function(root,factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else {
    root.tvpage = factory(root.$);
  }
}(this,function($){
/**
 * almond 0.2.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        aps = [].slice;

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (waiting.hasOwnProperty(name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!defined.hasOwnProperty(name) && !defining.hasOwnProperty(name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (defined.hasOwnProperty(depName) ||
                           waiting.hasOwnProperty(depName) ||
                           defining.hasOwnProperty(depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 15);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        waiting[name] = [name, deps, callback];
    };

    define.amd = {
        jQuery: true
    };
}());
define("vendor/almond", function(){});

define('src/events',['require','jquery'],function(require){
  
  	var $ = require('jquery');

	var events = {};
	var $disp = $({});

	events.subscribe = function(){
		$disp.on.apply($disp, arguments);
	};

	events.unsubscribe = function(){
		$disp.off.apply($disp, arguments);
	};

	events.publish = function(){
		$disp.trigger.apply($disp, arguments);
	};

  	return events;
});
define('src/plugins',[],function(){
  
  /*!
 * jQuery throttle / debounce - v1.1 - 3/7/2010
 * http://benalman.com/projects/jquery-throttle-debounce-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

  (function(window,undefined){
    '$:nomunge'; // Used by YUI compressor.
    
    var $ = window.jQuery || window.Cowboy || ( window.Cowboy = {} ),
      
    // Internal method reference.
    jq_throttle;
    
    $.throttle = jq_throttle = function( delay, no_trailing, callback, debounce_mode ) {
      // After wrapper has stopped being called, this timeout ensures that
      // `callback` is executed at the proper times in `throttle` and `end`
      // debounce modes.
      var timeout_id,
        
        // Keep track of the last time `callback` was executed.
        last_exec = 0;
      
      // `no_trailing` defaults to falsy.
      if ( typeof no_trailing !== 'boolean' ) {
        debounce_mode = callback;
        callback = no_trailing;
        no_trailing = undefined;
      }
      
      // The `wrapper` function encapsulates all of the throttling / debouncing
      // functionality and when executed will limit the rate at which `callback`
      // is executed.
      function wrapper() {
        var that = this,
          elapsed = +new Date() - last_exec,
          args = arguments;
        
        // Execute `callback` and update the `last_exec` timestamp.
        function exec() {
          last_exec = +new Date();
          callback.apply( that, args );
        };
        
        // If `debounce_mode` is true (at_begin) this is used to clear the flag
        // to allow future `callback` executions.
        function clear() {
          timeout_id = undefined;
        };
        
        if ( debounce_mode && !timeout_id ) {
          // Since `wrapper` is being called for the first time and
          // `debounce_mode` is true (at_begin), execute `callback`.
          exec();
        }
        
        // Clear any existing timeout.
        timeout_id && clearTimeout( timeout_id );
        
        if ( debounce_mode === undefined && elapsed > delay ) {
          // In throttle mode, if `delay` time has been exceeded, execute
          // `callback`.
          exec();
          
        } else if ( no_trailing !== true ) {
          // In trailing throttle mode, since `delay` time has not been
          // exceeded, schedule `callback` to execute `delay` ms after most
          // recent execution.
          // 
          // If `debounce_mode` is true (at_begin), schedule `clear` to execute
          // after `delay` ms.
          // 
          // If `debounce_mode` is false (at end), schedule `callback` to
          // execute after `delay` ms.
          timeout_id = setTimeout( debounce_mode ? clear : exec, debounce_mode === undefined ? delay - elapsed : delay );
        }
      };
      
      // Set the guid of `wrapper` function to the same of original callback, so
      // it can be removed in jQuery 1.4+ .unbind or .die by using the original
      // callback as a reference.
      if ( $.guid ) {
        wrapper.guid = callback.guid = callback.guid || $.guid++;
      }
      
      // Return the wrapper function.
      return wrapper;
    };
    
    $.debounce = function( delay, at_begin, callback ) {
      return callback === undefined
        ? jq_throttle( delay, at_begin, false )
        : jq_throttle( delay, callback, at_begin !== false );
    };
    
  })(this);
  
});
define('src/player',['require','jquery'],function(require){

	var $ = require('jquery');

	var setts = {
		controls:{
			floater:{removeControls:['tvplogo']}
		}
	};
	var $el = null;
	var	playerInstance = null;
	var	isLoaded = false;
	var playList = null;
	var toPlay = null;

	var play = function(obj,cue){ 
		if (!obj || !playerInstance) return false;
		var asset = !obj.asset && obj.type && obj.sources ? obj : obj.asset;
		asset.sources = asset.sources || [{file:asset.videoId}];
		asset.type = asset.type || 'youtube';
		asset.analyticsObj = {vd:asset.id,li:obj.loginId,pg:obj.parentId};
		var action = cue ? 'cue' : 'load';
		playerInstance[ action + 'Video' ](asset);
	};

	var player = function(selector,settings){
		
		$el = $(selector);
		if (!$el.length) return false;
		this.el = $el.eq(0);

		playList = settings.playList || [];
		setts.divId = selector.replace('#','');
		setts = $.extend(settings, setts);
		
		var isLibReady = function(){return ( window.TVPage && TVPage.player )};
		(function(run, create){
			if (isLibReady()) {
				run( create() );
			} else {
				$.ajax({
					url: 'http://d2kmhr1caomykv.cloudfront.net/player/assets/tvp/tvp-1.7.24-min.js',
					dataType: 'script',
					cache: true
				}).done(function(){ 
					if (isLibReady()) {
						run( create() );
					}
				});
			}
		}(function(instance){
			setts.onReady = function(){
				if (isLoaded || !playList.length || !playerInstance ) return;
				playerInstance.resize($el.width(),$el.height());
				play( playList[0], !Boolean(setts.autoplay) );
			    isLoaded = true;
			};
			playerInstance = TVPage.instances[instance.options.globalRunId];
		},function(){ return ( isLibReady ? new TVPage.player(setts) : {} ); }));
	};

	player.prototype = {
		play: function(){
			if (!arguments || !playList.length) return false;
			
			toPlay = arguments[ 2 === arguments.length ? 1 : 0 ];
			
			if ('object' === typeof toPlay) {
				return play(toPlay);
			} else if ( !isNaN(+toPlay) ) {
				var found;
				for (var i = 0; i < playList.length; i++) {
					var video = playList[i];
					if (+video.id === toPlay) {
						found = video;
					}
				}
				if (found) {
					play(found);
				} else {
					console.log('id not found');
				}
			}
		}
	};

	return player;

});
define('src/load',['require','jquery'],function(require){
  
  	var $ = require('jquery');

  	function load(endpoint,opts,cback){
      if (!$ || !$.ajax || !$.isFunction(cback)) return false;
      $.ajax({
    		url: endpoint,
    		type: 'post',
    		dataType: 'json',
    		data: JSON.stringify({
    			'X-login-id': TVSite.config.loginId,
    			videoId: opts.id || 0,
    			includeData: 'undefined' !== opts.data ? opts.data : false,
    			includeJS:0,
          includeMeta:0,
    			wrap:0
    		})
    	}).done(function(res){
    		if (!res || !res.html || !res.html.trim()) {
          cback(true,res);
        } else {
          cback(null,res.html.trim());
        }
    	});
    }

    return load;

});
define('src/search',['require','jquery'],function(require){
  
	var $ = require('jquery');
  
  var reply = null;
  var page = null;
  var activeQuery = null;
  var setts = {
    minChars: 3,
    emptyClear:true,
    outClear: true
  };
  var ajaxParams = null;
  var ajaxSetts = {
    wrap:0,
    form:0,
    includeJS:0,
    includeData:true,
    s: '',
    p: 0,
    n: 1000
  };

	function search(selector,settings,more){
    if (!$ || !$.ajax || !$.debounce || !$.isFunction(more)) return false;

    ajaxParams = $.extend(ajaxSetts, settings.request);
    delete settings.request;
    setts = $.extend(setts, settings);
    
    if (window.TVSite && TVSite.config && TVSite.config.loginId) {
      ajaxParams['X-login-id'] = TVSite.config.loginId;
    }

    $el = $(selector);

    var delay = 165;
    $el.find('input')
    .on('keyup',$.debounce(delay,function(e){
      
      var query = $(this).val().trim();
      if ( '' === query || activeQuery === query || query.length >= setts.minChars || !loginId) return;

      ajaxParams.s = query;
      return $.ajax({
        url: ajaxParams.endpoint || '',
        type: 'get',
        dataType: 'json',
        data: ajaxParams
      }).done(function(res){
        var err = Boolean(!res || !res.html || !res.cartridgeData);
        cback(err, !err && res.cartridgeData.searchResults, !err && res.html.trim());
      });


    }))
    .on('focusout',$.debounce(delay,function(e){
      console.log('leaving')
    }));
  }

  return search;

});
define('src/tvpage',['require','src/events','src/plugins','src/player','src/load','src/search'],function(require){
  
  var events = require('src/events');

  require('src/plugins');

  return {
  	VERSION: '0.0.0',
  	player: require('src/player'),
  	subscribe: events.subscribe,
  	unsubscribe: events.unsubscribe,
  	publish: events.publish,
  	load: require('src/load'),
    search: require('src/search')
  };
  
});
  define('jquery',function(){ return $; });
  return require('src/tvpage');
}));
